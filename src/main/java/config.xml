<?xml version="1.0" encoding="UTF-8"?>
<!--namespace of beans-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

    <!--    1st Beans -->
    <!-- Specify the className of which you want to create bean(object) in 'class' attribute
        and give a name to this bean to uniquely identify this bean     -->
    <bean class="org.example.Student" name="student1">
        <!-- collaborators and configuration for this bean go here -->

        <!-- here setter injection is used because we are using property tag-->
        <!-- specify the name of the variable present inside the class we want to create object in 'name' attribute -->
        <property name="studentId">
            <value>8777</value>
        </property>

        <!-- alternate way of setting value using 'value' attribute  -->
        <!--  set value of private var 'studentName'(inside Student Class) using 'name' and 'value' attributes      -->
        <property name="studentName" value="Ayush"/>

        <property name="studentAddress">
            <value>Liddle Road</value>
        </property>
    </bean>

    <!--    second bean (object)-->
    <!--   Using p-schema method to define the values, here we can use self-closing tag-->
    <bean class="org.example.Student" name="student2" p:studentId="234" p:studentName="Harsh"
          p:studentAddress="Liddle Road"/>

</beans>

